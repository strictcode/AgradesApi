// <auto-generated />
using System;
using Agrades.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Agrades.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Agrades.Data.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CityDistrict")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("DescNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("StateDistrict")
                        .HasColumnType("text");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.IdOfDisadvantage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("A")
                        .HasColumnType("integer");

                    b.Property<int?>("Bb")
                        .HasColumnType("integer");

                    b.Property<int?>("Cc")
                        .HasColumnType("integer");

                    b.Property<int?>("D")
                        .HasColumnType("integer");

                    b.Property<int?>("Ee")
                        .HasColumnType("integer");

                    b.Property<int?>("Ff")
                        .HasColumnType("integer");

                    b.Property<int?>("Gg")
                        .HasColumnType("integer");

                    b.Property<int?>("Hh")
                        .HasColumnType("integer");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("IdOfDisadvantages");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.IdOfFinancialDemands", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("A")
                        .HasColumnType("integer");

                    b.Property<string>("B")
                        .HasColumnType("text");

                    b.Property<string>("Cccc")
                        .HasColumnType("text");

                    b.Property<int>("D")
                        .HasColumnType("integer");

                    b.Property<string>("Ee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("IdOfFinancialDemands");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.Raor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Raor");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.Raso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Raso");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.Rast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rast");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.Rauj", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rauj");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryTypeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("UniqueStamp")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("RowCount")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.ClassDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<LocalDate>("StartAt")
                        .HasColumnType("date");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("OperationId");

                    b.ToTable("ClassDetail");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackofficeName")
                        .HasColumnType("text");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("EducationFieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupClassTypeId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("EducationFieldId");

                    b.HasIndex("GroupClassTypeId");

                    b.HasIndex("OperationId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.GroupClassType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ClassAssistents")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassTypeDesignation")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GroupClassTypes");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.StudentGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentGroup");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Agrades.Data.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationCode")
                        .HasColumnType("text");

                    b.Property<int>("IdentificationCodeTypeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PartNumberForRegister")
                        .HasColumnType("text");

                    b.Property<int>("SchoolType")
                        .HasColumnType("integer");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlNameNormalized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UrlName")
                        .IsUnique();

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationCode")
                        .HasColumnType("text");

                    b.Property<int>("IdentificationCodeTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSingleOperationOrg")
                        .HasColumnType("boolean");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RedIzo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(101);

                    b.Property<int>("RowCount")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.PersonDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackofficeNote")
                        .HasColumnType("text");

                    b.Property<Guid?>("BirthAddressId")
                        .HasColumnType("uuid");

                    b.Property<string>("BirthName")
                        .HasColumnType("text");

                    b.Property<LocalDate?>("BornOn")
                        .HasColumnType("date");

                    b.Property<int?>("CitizenshipCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CitizenshipId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactAddressId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DataBox")
                        .HasColumnType("text");

                    b.Property<string>("DegreesPost")
                        .HasColumnType("text");

                    b.Property<string>("DegreesPre")
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<int?>("FamilyStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentificationCode")
                        .HasColumnType("text");

                    b.Property<int?>("IdentificationCodeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("text");

                    b.Property<int?>("IdentityCardNumberTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("InactivityReasonId")
                        .HasColumnType("integer");

                    b.Property<string>("InsuranceCompanyCode")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationUniqueCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("PermanentAddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Sex")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TemporaryAddressId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BirthAddressId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("ContactAddressId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PermanentAddressId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TemporaryAddressId");

                    b.ToTable("PersonDetail");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AdjustedLevelOfExpectedOutput")
                        .HasColumnType("integer");

                    b.Property<string>("AdjustedLevelOfStudyLength")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<int?>("Gifted")
                        .HasColumnType("integer");

                    b.Property<int?>("Individual")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ProvidedLevelOfAid")
                        .HasColumnType("integer");

                    b.Property<string>("StudentCode")
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Sz")
                        .HasColumnType("integer");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Zz")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<int>("RowCount")
                        .IsConcurrencyToken()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.StudentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ChangeCode")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<int>("EducationLength")
                        .HasColumnType("integer");

                    b.Property<int?>("EducationTag")
                        .HasColumnType("integer");

                    b.Property<int>("EducationType")
                        .HasColumnType("integer");

                    b.Property<int>("EndReasonCode")
                        .HasColumnType("integer");

                    b.Property<LocalDate?>("EndsAt")
                        .HasColumnType("date");

                    b.Property<int?>("Financing")
                        .HasColumnType("integer");

                    b.Property<bool?>("HasSchoolMeals")
                        .HasColumnType("boolean");

                    b.Property<int>("HighestAchievedEducation")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsOnInternat")
                        .HasColumnType("boolean");

                    b.Property<string>("MinistryUniqueCode")
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ObligatoryAttendenceYears")
                        .HasColumnType("integer");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PreviousEducationCode")
                        .HasColumnType("text");

                    b.Property<Guid?>("PreviousEducationOperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SentenceCode")
                        .HasColumnType("integer");

                    b.Property<int>("StartReasonCode")
                        .HasColumnType("integer");

                    b.Property<LocalDate>("StartsAt")
                        .HasColumnType("date");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudyFieldId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("OperationId");

                    b.HasIndex("PreviousEducationOperationId");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyFieldId");

                    b.ToTable("StudentDetail");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CouncelingCenterIZO")
                        .HasColumnType("text");

                    b.Property<string>("CouncellingRedIzo")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDate>("DecisionValidSince")
                        .HasColumnType("date");

                    b.Property<LocalDate?>("DecisionValidTo")
                        .HasColumnType("date");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("DisabilityCodeId")
                        .HasColumnType("uuid");

                    b.Property<LocalDate?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("FinancialDemandsId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Financing")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ProvidedLevelOfAid")
                        .HasColumnType("integer");

                    b.Property<LocalDate?>("RealEndDate")
                        .HasColumnType("date");

                    b.Property<LocalDate?>("RealStartDate")
                        .HasColumnType("date");

                    b.Property<LocalDate>("StartAt")
                        .HasColumnType("date");

                    b.Property<LocalDate>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("StudentCode")
                        .HasColumnType("text");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DisabilityCodeId");

                    b.HasIndex("FinancialDemandsId");

                    b.HasIndex("OperationId");

                    b.HasIndex("StudentId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("Agrades.Data.Entities.StudyField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackofficeName")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<int>("LengthInYears")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Qualifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("StudyField");
                });

            modelBuilder.Entity("Agrades.Data.Entities.VirtualOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text");

                    b.Property<string>("IdentificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdentificationCodeTypeId")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("SchoolType")
                        .HasColumnType("integer");

                    b.Property<Instant>("ValidSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant?>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OperationId");

                    b.ToTable("VirtualOperation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Agrades.Data.Entities.Address", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Categories.Rast", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.IdOfDisadvantage", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany("StudentDisadvantages")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.IdOfFinancialDemands", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Category", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.ClassDetail", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Classes.Class", "Class")
                        .WithMany("ClassDetails")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.Group", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Classes.Class", "Class")
                        .WithMany("Groups")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.StudyField", "EducationField")
                        .WithMany()
                        .HasForeignKey("EducationFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Classes.GroupClassType", "ClassTypeDesignation")
                        .WithMany()
                        .HasForeignKey("GroupClassTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ClassTypeDesignation");

                    b.Navigation("EducationField");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.StudentGroup", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Classes.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany("Groups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Operation", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Person", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.PersonDetail", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Address", "BirthAddress")
                        .WithMany()
                        .HasForeignKey("BirthAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Categories.Rast", "Citizenship")
                        .WithMany()
                        .HasForeignKey("CitizenshipId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Address", "ContactAddress")
                        .WithMany()
                        .HasForeignKey("ContactAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Address", "PermanentAddress")
                        .WithMany()
                        .HasForeignKey("PermanentAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Persons.Person", "Person")
                        .WithMany("PersonDetails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Address", "TemporaryAddress")
                        .WithMany()
                        .HasForeignKey("TemporaryAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BirthAddress");

                    b.Navigation("Citizenship");

                    b.Navigation("ContactAddress");

                    b.Navigation("Operation");

                    b.Navigation("PermanentAddress");

                    b.Navigation("Person");

                    b.Navigation("TemporaryAddress");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Recommendation", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Student", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Persons.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("Agrades.Data.Entities.Persons.Student", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.StudentDetail", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Classes.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.VirtualOperation", "PreviousEducationOperation")
                        .WithMany()
                        .HasForeignKey("PreviousEducationOperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany("StudentDetails")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.StudyField", "StudyField")
                        .WithMany()
                        .HasForeignKey("StudyFieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Operation");

                    b.Navigation("PreviousEducationOperation");

                    b.Navigation("Student");

                    b.Navigation("StudyField");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Support", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Categories.IdOfDisadvantage", "DisabilityCode")
                        .WithMany()
                        .HasForeignKey("DisabilityCodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Categories.IdOfFinancialDemands", "FinancialDemands")
                        .WithMany()
                        .HasForeignKey("FinancialDemandsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Agrades.Data.Entities.Persons.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DisabilityCode");

                    b.Navigation("FinancialDemands");

                    b.Navigation("Operation");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.StudyField", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Agrades.Data.Entities.VirtualOperation", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Operation", "Operation")
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Agrades.Data.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Agrades.Data.Entities.Categories.Rast", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.Class", b =>
                {
                    b.Navigation("ClassDetails");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Classes.Group", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Person", b =>
                {
                    b.Navigation("PersonDetails");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Agrades.Data.Entities.Persons.Student", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("StudentDetails");

                    b.Navigation("StudentDisadvantages");
                });
#pragma warning restore 612, 618
        }
    }
}
